// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_dotnet_app.DbStore;

#nullable disable

namespace test_dotnet_app.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    [Migration("20240824051945_RemovedFullNameFromEmployeeEntity")]
    partial class RemovedFullNameFromEmployeeEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("test_dotnet_app.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6753),
                            Name = "Sales",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6764)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6771),
                            Name = "Marketing",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6771)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6772),
                            Name = "Engineering",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6773)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6774),
                            Name = "Finance",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6774)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6775),
                            Name = "HR",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6775)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6776),
                            Name = "IT",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6777)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6777),
                            Name = "Operations",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6778)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6779),
                            Name = "Product Management",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6779)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6780),
                            Name = "Quality Assurance",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6780)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6781),
                            Name = "R&D",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6782)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6784),
                            Name = "Sales Support",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6784)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6785),
                            Name = "Training & Development",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(6785)
                        });
                });

            modelBuilder.Entity("test_dotnet_app.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7208),
                            DepartmentId = 1,
                            FirstName = "John",
                            LastName = "Doe",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7210)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7212),
                            DepartmentId = 2,
                            FirstName = "Jane",
                            LastName = "Smith",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7213)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7214),
                            DepartmentId = 3,
                            FirstName = "Mike",
                            LastName = "Johnson",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7214)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7215),
                            DepartmentId = 4,
                            FirstName = "Sarah",
                            LastName = "Wilson",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7216)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7217),
                            DepartmentId = 5,
                            FirstName = "Michael",
                            LastName = "Davis",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7217)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7218),
                            DepartmentId = 6,
                            FirstName = "Emily",
                            LastName = "Thompson",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7218)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7219),
                            DepartmentId = 7,
                            FirstName = "Daniel",
                            LastName = "Brown",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7220)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7220),
                            DepartmentId = 8,
                            FirstName = "Sarah",
                            LastName = "Evans",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7221)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7222),
                            DepartmentId = 9,
                            FirstName = "Max",
                            LastName = "Evans",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7222)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7223),
                            DepartmentId = 10,
                            FirstName = "Emily",
                            LastName = "Evans",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7224)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7225),
                            DepartmentId = 11,
                            FirstName = "Micky",
                            LastName = "Evans",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7225)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7226),
                            DepartmentId = 12,
                            FirstName = "Kyle",
                            LastName = "Evans",
                            UpdatedAt = new DateTime(2024, 8, 24, 10, 49, 45, 577, DateTimeKind.Local).AddTicks(7226)
                        });
                });

            modelBuilder.Entity("test_dotnet_app.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("test_dotnet_app.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("test_dotnet_app.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test_dotnet_app.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("test_dotnet_app.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test_dotnet_app.Entities.Employee", b =>
                {
                    b.HasOne("test_dotnet_app.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("test_dotnet_app.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
